<?xml version="1.0" encoding="utf-8"?>
<dialect name='SimpleActian'
         class='actian_odbc'
         base='DefaultSQLDialect'
         version='18.1'>
        <!-- TODO NOTE DB2 may be viable https://tableau.github.io/connector-plugin-sdk/docs/design#dialect-base-classes -  SQLSErver -->
  <function-map>
    <!-- TODO FIXME bad -->
    <function name='FLOAT' group='cast' return-type='real'>
      <formula>CAST(((EXTRACT(EPOCH FROM %1) / ( 60 * 60 * 24)) + (365 * 70 + 17)) AS BIGINT)</formula>
      <argument type='date' />
    </function>

    <!-- TODO review test suite results and https://github.com/tableau/connector-plugin-sdk/blob/master/samples/components/dialects/full_dialect.tdd -->
    <function group='string' name='LEN' return-type='int'>
      <formula>LENGTH(%1)</formula>
      <argument type='str' />
    </function>

    <function group='string' name='LOWER' return-type='str'>
      <formula>LOWERCASE(%1)</formula>
        <argument type='str' />
    </function>

    <function group='string' name='UPPER' return-type='str'>
      <formula>UPPERCASE(%1)</formula>
        <argument type='str' />
    </function>

    <function group='date' name='TODAY' return-type='date'>
      <formula>ANSIDATE('today')</formula>
    </function>

    <!-- NOTE there is a operator name='-' for datetime diffs -->

    <!-- TODO is a FLOOR(0 needed? -->
    <!-- below works but appears to be overly complicated when compared to syntax that Vector/ActianX now supports
    <date-function name='DATEDIFF' return-type='int'>
      <formula>INT(TRUNC(DAY(CAST(CAST(%3 AS ANSIDATE) AS ANSIDATE) - CAST(CAST(%2 AS ANSIDATE) AS ANSIDATE)),0))</formula>

      <formula part='day'>INT(TRUNC(DAY(CAST(CAST(%3 AS ANSIDATE) AS ANSIDATE) - CAST(CAST(%2 AS ANSIDATE) AS ANSIDATE)),0))</formula>
      <formula part='year'>CAST(YEAR(%3) - YEAR(%2) AS INTEGER)</formula>
      <formula part='hour'>CAST((INT(TRUNC(DAY(CAST(CAST(%3 AS ANSIDATE) AS ANSIDATE) - CAST(CAST(CAST(%2 AS TIMESTAMP) AS ANSIDATE) AS ANSIDATE)),0)) * 24 + HOUR(%3) - HOUR(CAST(%2 AS TIMESTAMP))) AS INTEGER) </formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='datetime' />
    </date-function>
    -->

    <!-- entry from full_dialect not updated 100% -->
    <date-function name='DATEDIFF' return-type='int'>
      <formula part='year'>timestampdiff(YEAR, TIMESTAMP(%2), TIMESTAMP(%3))</formula>
      <formula part='quarter'>timestampdiff(QUARTER, TIMESTAMP(%2), TIMESTAMP(%3))</formula>  <!-- this fails on some (not all) values +/- 1 -->
      <formula part='month'>timestampdiff(MONTH, TIMESTAMP(%2), TIMESTAMP(%3))</formula>
      <formula part='dayofyear'>CAST(CAST(%3 AS DATE) - CAST(%2 AS DATE) AS INTEGER)</formula>
      <formula part='day'>timestampdiff(DAY, CAST(%2 as timestamp), CAST(%3 as timestamp))</formula>
      <formula part='weekday'>CAST(CAST(%3 AS DATE) - CAST(%2 AS DATE) AS INTEGER)</formula>
      <formula part='week'>CAST( FLOOR((( (( cast(sunday AS TIMESTAMP) - cast(&apos;1979-01-01 00:00:00&apos; AS TIMESTAMP) ) / 86400000) - ((7 + DAYOFWEEK(sunday + INTERVAL &apos;1&apos; DAY) - 1) % 7)) - ((( cast(%2 AS TIMESTAMP) - cast(&apos;1979-01-01 00:00:00&apos; AS TIMESTAMP) ) / 86400000) - ((7 + DAYOFWEEK(%2 + INTERVAL &apos;1&apos; DAY) - 1) % 7) ) )/7) AS INTEGER)</formula>
      <formula part='hour'>timestampdiff(HOUR, TIMESTAMP(%2), TIMESTAMP(%3))</formula>
      <formula part='minute'>timestampdiff(MINUTE, TIMESTAMP(%2), TIMESTAMP(%3))</formula>
      <formula part='second'>timestampdiff(SECOND, TIMESTAMP(%2), TIMESTAMP(%3))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='datetime' />
    </date-function>

    <date-function name='DATEPART' return-type='int'>
      <formula part='year'>YEAR(%2)</formula>
      <formula part='quarter'>CAST((MONTH(%2) - 1) / 3 + 1 AS BIGINT)</formula>
      <formula part='month'>MONTH(%2)</formula>
      <formula part='dayofyear'>DATEDIFF(TO_DATE(%2), TO_DATE(CAST(TRUNC(%2,&apos;YY&apos;) AS DATE))) + 1</formula>
      <formula part='day'>DAY(%2)</formula>
      <formula part='weekday'>(8 + DATEDIFF(%2,NEXT_DAY(CAST(%2 AS DATE),&apos;SU&apos;)))</formula>
      <formula part='week'>FLOOR((14 + DATEDIFF(%2, TRUNC(%2,&apos;YY&apos;)) + DATEDIFF(TRUNC(%2,&apos;YY&apos;),NEXT_DAY(TRUNC(%2,&apos;YY&apos;),&apos;SU&apos;)))/7)</formula>
      <formula part='hour'>HOUR(%2)</formula>
      <formula part='minute'>MINUTE(%2)</formula>
      <formula part='second'>SECOND(%2)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>

    <date-function name='DATEPART' return-type='int'>
      <formula part='year'>YEAR(%2)</formula>
      <formula part='quarter'>CAST((MONTH(%2) - 1) / 3 + 1 AS BIGINT)</formula>
      <formula part='month'>MONTH(%2)</formula>
      <formula part='dayofyear'>DATEDIFF(TO_DATE(%2), TO_DATE(CAST(TRUNC(%2,&apos;YY&apos;) AS DATE))) + 1</formula>
      <formula part='day'>DAY(%2)</formula>
      <formula part='weekday'>(8 + DATEDIFF(%2,NEXT_DAY(CAST(%2 AS DATE),&apos;SU&apos;)))</formula>
      <formula part='week'>FLOOR((14 + DATEDIFF(%2, TRUNC(%2,&apos;YY&apos;)) + DATEDIFF(TRUNC(%2,&apos;YY&apos;),NEXT_DAY(TRUNC(%2,&apos;YY&apos;),&apos;SU&apos;)))/7)</formula>
      <formula part='hour'>HOUR(%2)</formula>
      <formula part='minute'>MINUTE(%2)</formula>
      <formula part='second'>SECOND(%2)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
  </function-map>

  <sql-format>
    <!--
      format-create-table
      Piece-by-piece formula for creating a table.
      Predicates can be used with tokens that only correspond
      to a certain type of table.
      Predicates:
        GlobalTemp
        LocalTemp
        AnyTemp
        NoTemp
      String substitution tokens:
        %n - table name
        %f - formatted column list
      -->
    <format-create-table>
      <formula>DECLARE</formula>
      <formula predicate='GlobalTemp'>GLOBAL</formula>
      <formula predicate='LocalTemp'>GLOBAL</formula>
      <formula predicate='AnyTemp'>TEMPORARY</formula>
      <formula>TABLE %n (</formula>
      <formula>%f</formula>
      <formula>)</formula>
      <formula predicate='AnyTemp'> ON COMMIT PRESERVE ROWS</formula>
    </format-create-table>
  </sql-format>

</dialect>
