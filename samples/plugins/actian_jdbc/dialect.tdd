<?xml version="1.0" encoding="utf-8"?>
<dialect name='SimpleActian'
         class='actian_jdbc'
         base='DefaultSQLDialect'
         version='18.1'>
        <!-- TODO NOTE DB2 may be viable https://tableau.github.io/connector-plugin-sdk/docs/design#dialect-base-classes -  SQLSErver -->
  <function-map>
	<function group='numeric' name='ABS' return-type='real'>
      <formula>ABS(%1)</formula>
      <argument type='real' />
    </function>
	<function group='numeric' name='SQUARE' return-type='real'>
      <formula>(%1 * %1)</formula>
      <argument type='real' />
    </function>
	<function group='numeric' name='ABS' return-type='bool'>
      <formula>(CASE WHEN %1 is NULL THEN NULL WHEN %1 = ABS(%1)THEN TRUE ELSE FALSE END)</formula>
      <argument type='real' />
	  <argument type='real' />
    </function>
    <function group='numeric' name='COT' return-type='real'>
      <formula>CASE WHEN TAN(%1) = 0 THEN NULL ELSE 1.0/TAN(%1) END</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='DEGREES' return-type='real'>
      <formula>(%1 * 180.0000 / PI())</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>(CASE WHEN %1 &gt;= 0 OR FLOOR(%2) = %2 THEN POWER(%1,%2) END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='RADIANS' return-type='real'>
      <formula>(%1 * PI() / 180.0000)</formula>
      <argument type='real' />
    </function>    
    <function group='numeric' name='SIGN' return-type='int'>
      <formula>SIGN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SIGN' return-type='int'>
      <formula>IF(%1 &lt; 0, -1, IF(%1 IS NULL,NULL,1))</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>(CASE WHEN %1 &gt; 0 THEN LOG(%1) / (NULLIF(LOG (10),0)) ELSE NULL END)</formula>
      <!--<formula>(CASE WHEN %1 &lt;= 0 THEN NULL ELSE LOG (%1) END)</formula>-->
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>(CASE WHEN %1 &gt; 0 AND %2 &gt; 0 THEN LOG(%1) / (NULLIF(LOG (%2),0)) ELSE NULL END)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>(CASE WHEN %1 &gt; 0 THEN LOG(%1) / (NULLIF(LOG (10),0)) ELSE NULL END)</formula>
      <!--<formula>(CASE WHEN %1 &lt;= 0 THEN NULL ELSE LOG (%1) END)</formula>-->
      <argument type='int' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST(((EXTRACT(EPOCH FROM %1) / ( 60 * 60 * 24)) + (365 * 70 + 17)) AS BIGINT)</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(%1 AS BIGINT)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(%1 AS BIGINT)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(%1 AS BIGINT)</formula>
      <argument type='str' />
    </function>	<!--478 full TDD-->
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST(CASE WHEN %1 IS TRUE THEN 1.0 WHEN %1 IS FALSE THEN 0.0 ELSE NULL END AS DOUBLE PRECISION)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='INT' return-type='int'>	
      <formula>(CASE&#10;&#9;WHEN %1 IS NULL THEN NULL&#10;&#9;WHEN %1 IS NOT TRUE THEN 0&#10;&#9;ELSE 1 END)</formula>
      <argument type='bool' />
    </function>
     <function group='cast' name='INT' return-type='int'>
      <formula>CAST(TRUNC(%1,0) AS BIGINT)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>(CASE&#10;&#9;WHEN %1 IS NULL THEN NULL WHEN %1 IS TRUE THEN &apos;1&apos;&#10;&#9;ELSE &apos;0&apos;&#10;&#9;END)</formula>
      <argument type='bool' />
    </function>
 <!--   <function group='cast' name='STR' return-type='str'>
      <formula>(CASE&#10;&#9;WHEN %1 IS NULL THEN NULL&#10;&#9;WHEN %1 IS NOT TRUE THEN &apos;0&apos;&#10;&#9;ELSE &apos;1&apos; END)</formula>
      <argument type='bool' />
    </function>-->
    <function group='logical' name='IIF' return-type='int'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2 WHEN %1 IS NOT TRUE THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='bool'>
      <formula>(CASE WHEN %1 IS TRUE AND %2 IS TRUE THEN TRUE WHEN %1 IS NOT TRUE AND %3 IS TRUE THEN FALSE ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2 WHEN %1 IS NOT NULL THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2 WHEN %1 IS NOT NULL THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2 WHEN %1 IS NOT NULL THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>(CASE WHEN %1 IS TRUE THEN TIMESTAMP(%2,0) WHEN %1 IS NOT NULL THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='datetime' />
    </function>
   <function group='logical' name='IIF' return-type='date'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2 WHEN %1 IS NOT NULL THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2 WHEN %1 IS NOT NULL THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2 WHEN %1 IS NOT NULL THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
    </function> 
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 IS TRUE THEN 'no' WHEN %1 IS NOT NULL THEN 'oui' ELSE NULL END)</formula>
      <argument type='bool' />
    </function> 
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 != 0 THEN %2 WHEN %1 = 0 THEN %3 ELSE 'keith' END)</formula>
      <argument type='int' />
      <argument type='localstr' />
      <argument type='localstr' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2 WHEN %1 IS NOT NULL THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='localstr' />
      <argument type='localstr' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 != 0 THEN %2 WHEN %1 = 0 THEN %3 ELSE NULL END)</formula>
      <argument type='int' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>(CASE WHEN %1 &gt; %2 THEN %1 WHEN %1 &lt;= %2 THEN %2 ELSE %3 END)</formula>
      <argument type='real' />
      <argument type='real' />
      <argument type='real' />
    </function>
  	<function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 &gt; 0 THEN %2 WHEN %1 &lt;= 0 THEN %3 ELSE NULL END)</formula>
      <!--<formula>(CASE WHEN (%1 &gt; 3) THEN %2 WHEN (%1 &lt;= 3) THEN %3 ELSE NULL END)</formula>-->
      <argument type='int' />
      <argument type='str' />
      <argument type='str' />
    </function>	
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>NVL2(%1,FALSE,TRUE)</formula>
      <!--<formula>(CASE WHEN %1 IS TRUE THEN TRUE WHEN %1 IS NOT TRUE THEN FALSE ELSE TRUE END)</formula>-->
      <argument type='bool' />
    </function> 
	<function group='logical' name='ISNULL' return-type='bool'>
      <formula>NVL2(%1,FALSE,TRUE)</formula>
      <!--<formula>(CASE WHEN %1 &gt; 0 THEN TRUE ELSE FALSE END)</formula>-->
      <argument type='real' />
    </function> 
	<function group='logical' name='ISNULL' return-type='bool'>
      <formula>NVL2(%1,FALSE,TRUE)</formula>
      <!--<formula>(CASE WHEN %1 &gt; 0 THEN TRUE ELSE FALSE END)</formula>-->
      <argument type='str' />
    </function> 
	<function group='logical' name='ISNULL' return-type='bool'>
      <formula>NVL2(%1,FALSE,TRUE)</formula>
      <!--<formula>(CASE WHEN CHARACTER_LENGTH(%1) &gt; 0 THEN TRUE ELSE FALSE END)</formula>-->
      <argument type='int' />
    </function>
	<function group='logical' name='ISNULL' return-type='bool'>
      <formula>NVL2(%1,FALSE,TRUE)</formula>
      <!--<formula>(CASE WHEN %1 IS NOT NULL THEN TRUE ELSE FALSE END)</formula>-->
      <argument type='date' />
    </function>      	
    <function group='string' name='ASCII' return-type='int'>
      <formula>CHAREXTRACT(char(HEX(CHAREXTRACT(%1,1))),1)*16 + DECODE(CHAREXTRACT(char(HEX(CHAREXTRACT(%1,1))),2),'A',10,'B',11,'C',12,'D',13,'E',14,'F',15,CHAREXTRACT(char(HEX(CHAREXTRACT(%1,1))),2))</formula>
      <argument type='str' />
    </function>
    <function group='string' name='CHAR' return-type='int'>
      <formula>CHR(%1)</formula>
      <argument type='str' />
    </function>	
    <function group='string' name='FIND' return-type='int'>
      <formula>POSITION(%1, %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
	<!-- trial to int to string for testing -->
	<function group='string' name='FIND' return-type='int'>
      <formula>POSITION(%2, %1)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <formula>(CASE WHEN %3 &gt;= 1 THEN   (CASE WHEN POSITION(%2 IN SUBSTR(%1, %3)) = 0   THEN 0   ELSE POSITION(%2 IN SUBSTR(%1, %3)) + CAST(%3 AS INTEGER) - 1 END) WHEN %3 &lt;  1 THEN POSITION(%2 IN %1) ELSE NULL END)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <formula>(CASE WHEN %3 &gt;= 1 THEN   (CASE WHEN POSITION(%2 IN SUBSTR(%1, %3)) = 0   THEN 0   ELSE POSITION(%2 IN SUBSTR(%1, %3)) + %3 - 1 END) WHEN %3 &lt;  1 THEN POSITION(%2 IN %1) ELSE NULL END)</formula>
      <!--<formula>CASE&#10;WHEN %3 &lt; 1 THEN POSITION( %2 IN %1 )&#10;WHEN SUBSTRING_INDEX( SUBSTR(%1, %3), %2 ) = 0 THEN 0&#10;ELSE INSTR( SUBSTR(%1, %3), %2 ) + %3 - 1&#10;END&#10;</formula>-->
      <argument type='str' />
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='FINDNTH' return-type='int'>
      <formula>SUBSTRING_INDEX(%1, %2, CAST(%3 AS INTEGER))</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='FINDNTH' return-type='int'>
      <formula>SUBSTRING_INDEX(%1, %2, %3)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2 WHEN %1 IS NULL THEN %4 ELSE %3 END)</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2 WHEN %1 IS NULL THEN NULL ELSE %3 END)</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2 WHEN %1 IS NULL THEN NULL ELSE %2 END)</formula>
      <argument type='bool' />
      <argument type='str' />
    </function>
     <function group='logical' name='IIF' return-type='date'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2 WHEN %1 IS NULL THEN NULL ELSE %3 END)</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
    </function>
     <function group='logical' name='IIF' return-type='date'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2 WHEN %1 IS NULL THEN %4 ELSE %3 END)</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2 WHEN %1 IS NULL THEN %4 ELSE %3 END)</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
   <!-- BOLKE01 - temp remove 2019-10-09 <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 &gt; %2 THEN %3 WHEN %1 IS NULL OR %2 IS NULL THEN NULL ELSE %4 END)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
      </function> -->
    <function group='logical' name='IIF' return-type='real'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2 WHEN %1 IS NULL THEN NULL ELSE %3 END)</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>(CASE WHEN %1 IS TRUE THEN %2&#10; WHEN %1 IS NULL THEN %4&#10; ELSE %3 END)</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='string' name='SPACE' return-type='str'>
      <formula>(CASE WHEN %1 IS NOT NULL AND CAST(%1 AS INTEGER) &gt; 0 THEN LEFT(&apos;                                                                              &apos;,CAST(%1 AS INTEGER) ELSE NULL END)</formula>
      <argument type='real' />
    </function>
	  <function group='string' name='SPACE' return-type='str'>
      <formula>(CASE WHEN %1 IS NOT NULL AND %1 &gt; 0 THEN LEFT(&apos;                                                                              &apos;,%1) ELSE NULL END)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>&#10;(CASE WHEN (%2 IS NULL) OR CHARACTER_LENGTH(%1) - CAST(%2 AS INTEGER) &lt; 0 THEN NULL&#10;      ELSE SUBSTRING(%1,CAST(%2) AS INTEGER), CHARACTER_LENGTH(%1) - (CAST(%2 AS INTEGER)) + 1) END)</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
	<function group='string' name='MID' return-type='str'>
      <formula>&#10;(CASE WHEN (%2 IS NULL) OR CHARACTER_LENGTH(%1) - %2 &lt; 0 THEN NULL&#10;      ELSE SUBSTRING(%1,%2, CHARACTER_LENGTH(%1) - %2 + 1) END)</formula>
      <argument type='str' />
      <argument type='int' />
    </function>
    <!--<function group='string' name='MID' return-type='str'>
      <formula>&#10;(CASE WHEN (%2 IS NULL) OR CHARACTER_LENGTH(%1) - CAST(%2 AS INTEGER)  &lt; 0 THEN NULL&#10;      ELSE SUBSTRING(%1,CAST(%2 AS INTEGER), CHARACTER_LENGTH(%1) - (CAST(%2 AS INTEGER)) + 1) END)</formula>
      <argument type='str' />
      <argument type='real' />
    </function>-->
    <function group='string' name='MID' return-type='str'>
      <formula>(CASE WHEN %2 IS NULL OR %3 IS NULL THEN NULL&#10;      WHEN CAST(%3 AS INTEGER) &lt; 0 THEN &apos;&apos;&#10;      WHEN CAST(%2 AS INTEGER) &lt; 1 THEN SUBSTR(%1,1,CAST(%3 AS INTEGER))&#10;      ELSE SUBSTR(%1, CAST(%2 AS INTEGER), CAST(%3 AS INTEGER)) END)</formula>
      <argument type='str' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='string' name='REPLACE' return-type='str'>
      <formula>REPLACE(CAST(%1 AS VARCHAR(1000)), CAST(%2 AS VARCHAR(1000)), CAST(%3 AS VARCHAR(1000)))</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
      <function group='string' name='SPLIT' return-type='str'>
       <formula>IF(%3 &gt;0,SUBSTR(SUBSTRING_INDEX(%1,&apos;%2&apos;,%3),LENGTH(SUBSTRING_INDEX(%1,&apos;%2&apos;,(%3 - 0))),LENGTH(SUBSTRING_INDEX(%1,&apos;%2&apos;,(%3 + 1)))-LENGTH(SUBSTRING_INDEX(%1,&apos;%2&apos;,(%3 - 0)))-1),REPLACE(SUBSTR(SUBSTRING_INDEX(%1,&apos;%2&apos;,%3 - 1),LENGTH(SUBSTRING_INDEX(%1,&apos;%2&apos;,%3 - 0)),LENGTH(SUBSTRING_INDEX(%1,&apos;%2&apos;,%3 - 1))-LENGTH(SUBSTRING_INDEX(%1,&apos;%2&apos;,%3 - 0))),&apos;%2&apos;,&apos;&apos;))</formula>
      <!--<formula>SUBSTR(SUBSTRING_INDEX(%1,&apos;%2&apos;,%3),LENGTH(SUBSTRING_INDEX(%1,&apos;%2&apos;,(%3 - 1)) </formula>-->
      <!--<formula>IF(%3&gt;0,SUBSTR(SUBSTRING_INDEX(%1,&apos;%2&apos;,%3),LENGTH(SUBSTRING_INDEX(%1,&apos;%2&apos;,(%3 - 0))),LENGTH(SUBSTRING_INDEX(%1,&apos;%2&apos;,(%3 +1)))-LENGTH(SUBSTRING_INDEX(%1,&apos;%2&apos;,(%3 - 0)))-1),'')</formula>-->
      <argument type='str' />
      <argument type='localstr' />
      <argument type='localint' />
    </function>
    <function group='string' name='STARTSWITH' return-type='bool'>
      <formula>(CASE WHEN SUBSTR(%1, 1, CHARACTER_LENGTH(%2)) = %2 THEN TRUE WHEN SUBSTR(%1, 1, CHARACTER_LENGTH(%2)) != %2 THEN FALSE ELSE NULL END)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
	  <function group='cast' name='FLOAT' return-type='real'>
      <formula>%1</formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='CORR' return-type='real'>
      <formula>CORR_PEARSON(%1, %2)</formula>
      <unagg-formula>CAST(NULL AS DOUBLE PRECISION)</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
      <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(CASE WHEN %1 IS TRUE THEN 1 WHEN %1 IS NOT NULL THEN 0 ELSE NULL END)</formula>
      <unagg-formula>(CASE WHEN %1 IS TRUE THEN 1 WHEN %1 IS NOT NULL THEN 1 ELSE 0 END)</unagg-formula>
      <argument type='bool' />
    </function>	   <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT (CASE WHEN %1 IS TRUE THEN 1 WHEN %1 IS NOT NULL THEN 0 ELSE NULL END))</formula>
      <unagg-formula>(CASE WHEN %1 IS TRUE THEN 1 WHEN %1 IS NOT NULL THEN 0 ELSE 0 END)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='PERCENTILE' return-type='real'>
      <formula>PERCENTILE_CONT(%2) WITHIN GROUP (ORDER BY %1 ASC)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
      <argument type='localreal' />
    </function>
    <function group='aggregate' name='STDEVP' return-type='real'>
      <formula>STDDEV_POP(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN NULL ELSE 0.0 END)</unagg-formula>
      <argument type='real' />
    </function>
     <function group='operator' name='!' return-type='bool'>
      <formula>IF(%1,FALSE,TRUE)</formula>
      <argument type='bool' />
    </function>
	<!-- This was tried to remove the failing NOT query for -q lod..
	<function group='operator' name='!' return-type='bool'>
      <formula>(NVL2(%1,0,1))</formula>
      <argument type='bool' />
    </function>
	<function group='operator' name='!' return-type='bool'>
      <formula>(NVL2(%1,-1,2))</formula>
      <argument type='int' />
    </function> -->
    <function group='operator' name='+' return-type='datetime'>
      <formula>(TIMESTAMP(TO_CHAR(%1,'YYYY-MM-DD')||' '||'TO_CHAR(%2,'HH24:MI:SS'),0))</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula>(TIMESTAMP(TO_CHAR(%1,'YYYY-MM-DD')||' '||'TO_CHAR(%2,'HH24:MI:SS'),0))</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula>(TIMESTAMP(%1||' '||'TO_CHAR(%2,'HH24:MI:SS'),0))</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula>(TIMESTAMP(TO_CHAR(%1,'YYYY-MM-DD')||' '||'TO_CHAR(%2,'HH24:MI:SS'),0))</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula>(TIMESTAMP(TO_CHAR(%1,'YYYY-MM-DD')||' '||'TO_CHAR(%2,'HH24:MI:SS'),0))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula>(TIMESTAMP(%1||' '||'TO_CHAR(%2,'HH24:MI:SS'),0))</formula>
      <argument type='str' />
      <argument type='date' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>CAST(TIMESTAMPDIFF(SQL_TSI_SECONDS,%2,TIMESTAMP(%1)) AS FLOAT)/86400.0</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
	<function group='operator' name='-' return-type='datetime'>
      <formula>TIMESTAMPADD(SQL_TSI_DAY,-%2,%1)</formula>
      <argument type='datetime' />
      <argument type='int' />
    </function>
	<function group='operator' name='+' return-type='datetime'>
      <formula>TIMESTAMPADD(SQL_TSI_DAY,%2,%1)</formula>
      <argument type='datetime' />
      <argument type='int' />
    </function>
	<function group='operator' name='-' return-type='date'>
      <formula>TIMESTAMPADD(SQL_TSI_DAY,-%2,%1)</formula>
      <argument type='date' />
      <argument type='int' />
    </function>
	<function group='operator' name='+' return-type='date'>
      <formula>TIMESTAMPADD(SQL_TSI_DAY,%2,%1)</formula>
      <argument type='date' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
       <formula>TIMESTAMP(TIMESTAMPADD(SQL_TSI_SECOND,(-%2*86400.0),TIMESTAMP(%1,0)),1)</formula>
       <argument type='datetime' />
       <argument type='real' />
     </function>
     <function group='operator' name='+' return-type='datetime'>
       <formula>TIMESTAMP(TIMESTAMPADD(SQL_TSI_SECOND,(%2*86400.0),TIMESTAMP(%1,0)),2)</formula>
       <argument type='datetime' />
       <argument type='real' />
     </function>
     <function group='operator' name='-' return-type='datetime'>
       <formula>TIMESTAMP(TIMESTAMPADD(SQL_TSI_SECOND,(-%2*86400.0),TIMESTAMP(%1,2)),3)</formula>
       <argument type='date' />
       <argument type='real' />
     </function>
     <function group='operator' name='+' return-type='datetime'>
       <formula>TIMESTAMP(TIMESTAMPADD(SQL_TSI_SECOND,(%2*86400.0),TIMESTAMP(%1,4)),4)</formula>
       <argument type='date' />
       <argument type='real' />
     </function>
     <function group='operator' name='-' return-type='date'>
       <formula>ANSIDATE(TIMESTAMPADD(SQL_TSI_SECOND,(-%2*86400.0),TIMESTAMP(%1,6)))</formula>
       <argument type='date' />
       <argument type='real' />
     </function>
   <function group='operator' name='+' return-type='date'>
       <formula>ANSIDATE(TIMESTAMPADD(SQL_TSI_SECOND,(%2*86400.0),TIMESTAMP(%1,8)))</formula>
       <argument type='date' />
       <argument type='real' />
     </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(CASE WHEN %1 != %2 THEN TRUE WHEN %1 =  %2 THEN FALSE ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 AND %2 = 0 OR NOT %1 AND %2 != 0)</formula>
      <argument type='bool' />
      <argument type='int' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 != %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 = 0 AND %2 OR %1 != 0 AND NOT %2)</formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(CASE WHEN %1 != %2  THEN TRUE WHEN  %1 IS NOT NULL THEN FALSE ELSE NULL END)</formula>
      <!--<formula>(%1 != %2)</formula>-->
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(CASE WHEN TIMESTAMP(%1,0) != TIMESTAMP(%2,0)  THEN TRUE WHEN  %1 IS NOT NULL THEN FALSE ELSE NULL END)</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(CASE WHEN TIMESTAMP(%1,0) != TIMESTAMP(%2,0)  THEN TRUE WHEN  %1 IS NOT NULL THEN FALSE ELSE NULL END)</formula>
      <!--<formula>(%1 != %2)</formula>-->
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
       <formula>(CASE WHEN %1 != %2  THEN TRUE WHEN  %1 IS NOT NULL THEN FALSE ELSE NULL END)</formula>
      <!--<formula>(%1 != %2)</formula>-->
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
       <formula>(CASE WHEN TIMESTAMP(%1,0) != TIMESTAMP(%2,0)  THEN TRUE WHEN  %1 IS NOT NULL THEN FALSE ELSE NULL END)</formula>
      <!--<formula>(%1 != %2)</formula>-->
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
     <formula>(CASE WHEN TIMESTAMP(%1,0) != TIMESTAMP(%2,0)  THEN TRUE WHEN  %1 IS NOT NULL THEN FALSE ELSE NULL END)</formula>
      <!--<formula>(%1 != %2)</formula>-->
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
       <formula>(CASE WHEN TIMESTAMP(%1,0) != TIMESTAMP(%2,0)  THEN TRUE WHEN  %1 IS NOT NULL THEN FALSE ELSE NULL END)</formula>
      <!--<formula>(%1 != %2)</formula>-->
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(CASE WHEN %2 != 0 THEN %1 / %2 END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(CASE WHEN %1 = %2 THEN TRUE WHEN %1 !=  %2 THEN FALSE ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='==' return-type='str'>
      <formula>(CASE WHEN %1 = 1 THEN %2 WHEN %1 IS NULL NULL ELSE %3 END)</formula>
      <argument type='int' />
      <argument type='localstr' />
      <argument type='localstr' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 AND %2 != 0 OR NOT %1 AND %2 = 0)</formula>
      <argument type='bool' />
      <argument type='int' />
    </function>  
	<function group='operator' name='==' return-type='bool'>
      <formula>(%1 != 0 AND %2 OR %1 = 0 AND NOT %2)</formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <!-- BOLKE01 below added from FULL dialect - not sure why the  %1 &lt; 0 is requirwed -->
    <function group='operator' name='^^' return-type='real'>
      <formula>(CASE WHEN %1 &lt; 0 AND TRUNC(%2,0) &lt;&gt; %2 THEN NULL ELSE POWER(%1,%2) END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>POWER(CAST(%1 as float),%2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <!-- BOLKE01 above added from FULL dialect - not sure why the  %1 &lt; 0 is requirwed -->
    <function group='operator' name='^^' return-type='real'>
      <formula>(CASE WHEN %1 &lt; 0 AND FLOOR(%2) != %2 THEN NULL ELSE POWER(%1,%2) END)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
	<!-- This could be 1=true 0=false -->
	<function group='operator' name='==' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 = %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
	<function group='operator' name='==' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 = %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
	<function group='operator' name='&gt;' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &gt; %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
	<function group='operator' name='&gt;' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &gt; %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
	<function group='operator' name='&lt;' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &lt; %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
	<function group='operator' name='&lt;' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &lt; %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
  <function group='operator' name='&lt;' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &lt; %2 THEN TRUE WHEN %1 &gt;= %2 THEN FALSE ELSE NULL END)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
	<function group='operator' name='&lt;' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &lt; %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
	<function group='operator' name='&lt;' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &lt; %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
	<function group='operator' name='&lt;=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &lt;= %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
	<function group='operator' name='&lt;=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &lt;= %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
  <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &lt;= %2 THEN TRUE WHEN %1 &gt; %2 THEN FALSE ELSE NULL END)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
		<function group='operator' name='&lt;=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &lt;= %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
	<function group='operator' name='&lt;=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &lt;= %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &lt;= %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &lt; %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
	<function group='operator' name='&gt;=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &gt;= %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
	<function group='operator' name='&gt;=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &gt;= %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
  <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &gt;= %2 THEN TRUE WHEN %1 &lt; %2 THEN FALSE ELSE NULL END)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
	<function group='operator' name='&gt;=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &gt;= %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
	<function group='operator' name='&gt;=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &gt;= %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &gt;= %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &gt; %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &gt; %2 THEN TRUE WHEN %1 &lt;= %2 THEN FALSE ELSE NULL END)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 != %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
	<function group='operator' name='!=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 != %2 THEN TRUE WHEN %1 = %2 THEN FALSE ELSE NULL END)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
  <function group='operator' name='!=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 != %2 THEN TRUE WHEN %1 = %2 THEN FALSE ELSE NULL END)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
  <function group='operator' name='!=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL OR %2 IS NULL THEN NULL WHEN %1 != %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
	<function group='operator' name='!=' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 != %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
       <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 != %2 THEN TRUE ELSE FALSE END)</formula>
       <argument type='real' />
       <argument type='real' />
     </function>
	<function group='operator' name='!=' return-type='bool'>
      <formula>(CASE WHEN %1 = TIMESTAMP(%2) THEN TRUE WHEN %1 IS NULL THEN NULL ELSE FALSE END)</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
	<function group='operator' name='==' return-type='bool'>
      <formula>(CASE WHEN %1 = ANSIDATE(%2) THEN TRUE WHEN %1 IS NULL THEN NULL ELSE FALSE END)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
  <function group='operator' name='==' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 = %2 THEN TRUE WHEN %1 != %2 THEN FALSE ELSE NULL END)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <!-- BOLKE01 backeed out after e65 V56
  <function group='operator' name='==' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 = %2 THEN TRUE WHEN %1 != %2 THEN FALSE ELSE NULL END)</formula>
      <argument type='str' />
      <argument type='str' />
    </function> -->
  <function group='operator' name='==' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL OR %2 IS NULL THEN NULL WHEN %1 = %2 THEN TRUE ELSE FALSE END)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
  <function group='operator' name='==' return-type='bool'>
      <formula>IF(%1 &lt;&gt; %2,FALSE,IF(%1 IS NOT NULL,TRUE, NULL))</formula>
      <!--<formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 = %2 THEN TRUE WHEN %1 != %2 THEN FALSE ELSE NULL END)</formula>-->
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(CASE WHEN %1 IS NULL OR %2 IS NULL THEN NULL WHEN %1 = %2 THEN TRUE ELSE FALSE END)</formula>
      <!--BOLKE01 2019-10-08b <formula>IF(%1 &lt;&gt; %2,FALSE,IF(%1 IS NOT NULL,TRUE, NULL))</formula>-->
      <!--<formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 = %2 THEN TRUE WHEN %1 != %2 THEN FALSE ELSE NULL END)</formula>-->
      <argument type='int' />
      <argument type='int' />
    </function>
  <function group='operator' name='==' return-type='bool'>
      <!--<formula>IF(ANSIDATE(%1) &lt;&gt; YEAR(%2),FALSE,IF(YEAR(%1) IS NOT NULL,TRUE, NULL))</formula> INVALID TEST-->
      <formula>(CASE WHEN ANSIDATE(%1) = %2 THEN TRUE WHEN ANSIDATE(%1) != %2 THEN FALSE ELSE NULL END)</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
	<function group='operator' name='&gt;' return-type='bool'>
      <formula>IF(%1 &lt;= ANSIDATE(%2),FALSE,IF(%1 IS NOT NULL,TRUE, NULL))</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='==' return-type='bool'>
       <formula>(CASE WHEN %1 IS NULL OR %2 IS NULL THEN NULL WHEN %1 = %2 THEN TRUE ELSE FALSE END)</formula>
       <argument type='real' />
       <argument type='real' />
     </function>
    <function group='operator' name='==' return-type='bool'>
       <formula>(CASE WHEN %1 IS NULL OR %2 IS NULL THEN NULL WHEN %1 = %2 THEN TRUE ELSE FALSE END)</formula>
       <argument type='int' />
       <argument type='int' />
     </function>
	<function group='operator' name='&gt;' return-type='bool'>
      <formula>IF(ANSIDATE(%1) &lt;= %2,FALSE,IF(%1 IS NOT NULL,TRUE, NULL))</formula>
      <!--<formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %1 &gt; %2 THEN TRUE ELSE FALSE END)</formula>-->
      <argument type='datetime' />
      <argument type='date' />
    </function>

    <!-- TODO review test suite results and https://github.com/tableau/connector-plugin-sdk/blob/master/samples/components/dialects/full_dialect.tdd -->
    <function group='string' name='LEN' return-type='int'>
      <formula>LENGTH(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LEFT' return-type='str'>
      <formula>CASE WHEN %2 &gt;= 0 THEN SUBSTRING(%1,1,%2) ELSE NULL END</formula>
      <argument type='str' />
      <argument type='int' />
    </function> 

    <function group='string' name='LOWER' return-type='str'>
      <formula>LOWERCASE(%1)</formula>
        <argument type='str' />
    </function>

    <function group='string' name='UPPER' return-type='str'>
      <formula>UPPERCASE(%1)</formula>
        <argument type='str' />
    </function>
	<function group='string' name='CONTAINS' return-type='bool'>
      <!--<formula>%1 RLIKE CONCAT(&apos;.*&apos;, %2, &apos;.*&apos;)</formula> -->
	  <formula>(CASE WHEN %2 IS NULL OR %1 IS NULL THEN NULL WHEN  CHARACTER_LENGTH(%2) &gt;= 1 AND %1 CONTAINING (%2) THEN TRUE ELSE FALSE END)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='LEN' return-type='int'>
      <formula>CHARACTER_LENGTH(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='ENDSWITH' return-type='bool'>
      <formula>(CASE WHEN %2 IS NULL OR %1 IS NULL THEN NULL WHEN  CHARACTER_LENGTH(%2) &gt;= 1 AND %1 ENDING (%2) THEN TRUE ELSE FALSE END)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
	 <function group='string' name='ENDSWITH' return-type='str'>
      <formula>(CASE WHEN %2 IS NULL OR %1 IS NULL THEN NULL WHEN  CHARACTER_LENGTH(%2) &gt;= 1 AND %1 ENDING (%2) THEN TRUE ELSE FALSE END)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='date' name='YEAR' return-type='int'>
      <formula>YEAR(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='YEAR' return-type='int'>
      <formula>YEAR(%1)</formula>
      <argument type='date' />
    </function>

    <function group='date' name='TODAY' return-type='date'>
      <formula>ANSIDATE(current_date)</formula>
    </function>
    <function group='date' name='NOW' return-type='datetime'>
      <formula>TIMESTAMP(CURRENT_TIMESTAMP,0)</formula>
    </function>
    <function group='date' name='ISDATE' return-type='bool'>
      <formula>CASE WHEN %1 BETWEEN '0001-01-01' AND '9999-12-31' THEN TRUE WHEN %1 IS NULL THEN  NULL ELSE FALSE END</formula>
      <argument type='str' />
    </function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP),%3)</formula>
      <formula part='year'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/12.0,0) AS BIGINT)</formula>
      <!--<formula part='year'>TIMESTAMPDIFF(YEAR,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='quarter'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/3.0,0) AS BIGINT)</formula>
      <!--<formula part='quarter'>TIMESTAMPDIFF(QUARTER,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='month'>TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='dayofyear'>TIMESTAMPDIFF(DAY,CAST(%2 AS TIMESTAMP(1)), CAST(%3 AS DATE))</formula>
      <!--<formula part='dayofyear'>TIMESTAMPDIFF(DOY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='day'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='weekday'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula  part='week'>CAST(ROUND(TIMESTAMPDIFF(DAY,%2, CAST(%3 AS DATE))/7.0,0) AS INTEGER)</formula>
      <!--<formula part='week'> CAST(( (FLOOR(UNIX_SECONDS(CAST(sunday AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM sunday) ) - (FLOOR(UNIX_SECONDS(CAST(%2 AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM %2) ) ) / 7 AS INT64)</formula>-->
      <formula part='hour'>TIMESTAMPDIFF(HOUR,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='minute'>TIMESTAMPDIFF(MINUTE,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='second'>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <argument type='localstr' />
      <argument type='date' />
      <argument type='date' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP),%3)</formula>
      <formula part='year'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/12.0,0) AS BIGINT)</formula>
      <!--<formula part='year'>TIMESTAMPDIFF(YEAR,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='quarter'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/3.0,0) AS BIGINT)</formula>
      <!--<formula part='quarter'>TIMESTAMPDIFF(QUARTER,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='month'>TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='dayofyear'>TIMESTAMPDIFF(DAY,CAST(%2 AS TIMESTAMP(2)), CAST(%3 AS DATE))</formula>
      <!--<formula part='dayofyear'>TIMESTAMPDIFF(DOY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='day'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='weekday'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula  part='week'>CAST(ROUND(TIMESTAMPDIFF(DAY,%2, %3/7.0,0) AS INTEGER)</formula>
      <!--<formula part='week'> CAST(( (FLOOR(UNIX_SECONDS(CAST(sunday AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM sunday) ) - (FLOOR(UNIX_SECONDS(CAST(%2 AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM %2) ) ) / 7 AS INT64)</formula>-->
      <formula part='hour'>TIMESTAMPDIFF(HOUR,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='minute'>TIMESTAMPDIFF(MINUTE,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='second'>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <argument type='localstr' />
      <argument type='date' />
      <argument type='date' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP),%3)</formula>
      <formula part='year'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/12.0,0) AS BIGINT)</formula>
      <!--<formula part='year'>TIMESTAMPDIFF(YEAR,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='quarter'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/3.0,0) AS BIGINT)</formula>
      <!--<formula part='quarter'>TIMESTAMPDIFF(QUARTER,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='month'>TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='dayofyear'>TIMESTAMPDIFF(DAY,CAST(%2 AS TIMESTAMP(2)), CAST(%3 AS DATE))</formula>
      <!--<formula part='dayofyear'>TIMESTAMPDIFF(DOY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='day'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='weekday'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula  part='week'>CAST(ROUND(TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), %3/7.0,0) AS INTEGER)</formula>
      <!--<formula part='week'> CAST(( (FLOOR(UNIX_SECONDS(CAST(sunday AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM sunday) ) - (FLOOR(UNIX_SECONDS(CAST(%2 AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM %2) ) ) / 7 AS INT64)</formula>-->
      <formula part='hour'>TIMESTAMPDIFF(HOUR,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='minute'>TIMESTAMPDIFF(MINUTE,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='second'>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <argument type='localstr' />
      <argument type='date' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP),%3)</formula>
      <formula part='year'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/12.0,0) AS BIGINT)</formula>
      <!--<formula part='year'>TIMESTAMPDIFF(YEAR,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='quarter'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/3.0,0) AS BIGINT)</formula>
      <!--<formula part='quarter'>TIMESTAMPDIFF(QUARTER,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='month'>TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='dayofyear'>TIMESTAMPDIFF(DAY,CAST(%2 AS TIMESTAMP(2)), CAST(%3 AS DATE))</formula>
      <!--<formula part='dayofyear'>TIMESTAMPDIFF(DOY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='day'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='weekday'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula  part='week'>CAST(ROUND(TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))/7.0,0) AS INTEGER)</formula>
      <!--<formula part='week'> CAST(( (FLOOR(UNIX_SECONDS(CAST(sunday AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM sunday) ) - (FLOOR(UNIX_SECONDS(CAST(%2 AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM %2) ) ) / 7 AS INT64)</formula>-->
      <formula part='hour'>TIMESTAMPDIFF(HOUR,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='minute'>TIMESTAMPDIFF(MINUTE,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='second'>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP),%3)</formula>
      <formula part='year'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/12.0,0) AS BIGINT)</formula>
      <!--<formula part='year'>TIMESTAMPDIFF(YEAR,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='quarter'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/3.0,0) AS BIGINT)</formula>
      <!--<formula part='quarter'>TIMESTAMPDIFF(QUARTER,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='month'>TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='dayofyear'>TIMESTAMPDIFF(DAY,CAST(%2 AS TIMESTAMP(2)), CAST(%3 AS DATE))</formula>
      <!--<formula part='dayofyear'>TIMESTAMPDIFF(DOY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='day'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='weekday'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula  part='week'>CAST(ROUND(TIMESTAMPDIFF(DAY,CAST(%2), %3)/7.0,0) AS INTEGER)</formula>
      <!--<formula part='week'> CAST(( (FLOOR(UNIX_SECONDS(CAST(sunday AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM sunday) ) - (FLOOR(UNIX_SECONDS(CAST(%2 AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM %2) ) ) / 7 AS INT64)</formula>-->
      <formula part='hour'>TIMESTAMPDIFF(HOUR,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='minute'>TIMESTAMPDIFF(MINUTE,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='second'>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='date' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP),%3)</formula>
      <formula part='year'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/12.0,0) AS BIGINT)</formula>
      <!--<formula part='year'>TIMESTAMPDIFF(YEAR,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='quarter'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/3.0,0) AS BIGINT)</formula>
      <!--<formula part='quarter'>TIMESTAMPDIFF(QUARTER,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='month'>TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='dayofyear'>TIMESTAMPDIFF(DAY,CAST(%2 AS TIMESTAMP(2)), CAST(%3 AS DATE))</formula>
      <!--<formula part='dayofyear'>TIMESTAMPDIFF(DOY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='day'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='weekday'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula  part='week'>TIMESTAMPDIFF(WEEK,%2,%3)</formula>
      <!-- BOLKE01 after e72f<formula  part='week'>CAST(ROUND(TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))/7.0,0) AS INTEGER)</formula>-->
      <!--<formula part='week'> CAST(( (FLOOR(UNIX_SECONDS(CAST(sunday AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM sunday) ) - (FLOOR(UNIX_SECONDS(CAST(%2 AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM %2) ) ) / 7 AS INT64)</formula>-->
      <formula part='hour'>TIMESTAMPDIFF(HOUR,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='minute'>TIMESTAMPDIFF(MINUTE,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='second'>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP),%3)</formula>
      <formula part='year'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/12.0,0) AS BIGINT)</formula>
      <!--<formula part='year'>TIMESTAMPDIFF(YEAR,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='quarter'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/3.0,0) AS BIGINT)</formula>
      <!--<formula part='quarter'>TIMESTAMPDIFF(QUARTER,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='month'>TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='dayofyear'>TIMESTAMPDIFF(DAY,CAST(%2 AS TIMESTAMP(3)), CAST(%3 AS DATE))</formula>
      <!--<formula part='dayofyear'>TIMESTAMPDIFF(DOY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='day'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='weekday'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula  part='week'>CAST(ROUND(TIMESTAMPDIFF(DAY,CAST(CAST(%2 AS TIMESTAMP) AS DATE), CAST(%3 AS DATE))/7.0,0) AS INTEGER)</formula>
      <!--<formula part='week'> CAST(( (FLOOR(UNIX_SECONDS(CAST(sunday AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM sunday) ) - (FLOOR(UNIX_SECONDS(CAST(%2 AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM %2) ) ) / 7 AS INT64)</formula>-->
      <formula part='hour'>TIMESTAMPDIFF(HOUR,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='minute'>TIMESTAMPDIFF(MINUTE,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='second'>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <argument type='localstr' />
      <argument type='localstr' />
      <argument type='date' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP),%3)</formula>
      <formula part='year'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/12.0,0) AS BIGINT)</formula>
      <!--<formula part='year'>TIMESTAMPDIFF(YEAR,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='quarter'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/3.0,0) AS BIGINT)</formula>
      <!--<formula part='quarter'>TIMESTAMPDIFF(QUARTER,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='month'>TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='dayofyear'>TIMESTAMPDIFF(DAY,CAST(%2 AS TIMESTAMP(3)), CAST(%3 AS DATE))</formula>
      <!--<formula part='dayofyear'>TIMESTAMPDIFF(DOY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='day'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='weekday'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula  part='week'>CAST(ROUND(TIMESTAMPDIFF(DAY,%2, CAST(%3 AS DATE)/7.0,0) AS INTEGER)</formula>
      <!--<formula part='week'>TIMESTAMPDIFF(WEEK,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <!--<formula part='week'> CAST(( (FLOOR(UNIX_SECONDS(CAST(sunday AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM sunday) ) - (FLOOR(UNIX_SECONDS(CAST(%2 AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM %2) ) ) / 7 AS INT64)</formula>-->
      <formula part='hour'>TIMESTAMPDIFF(HOUR,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='minute'>TIMESTAMPDIFF(MINUTE,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='second'>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <argument type='localstr' />
      <argument type='date' />
      <argument type='datetime' />
    </date-function>
        <date-function name='DATEDIFF' return-type='int'>
      <formula>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP),%3)</formula>
      <formula part='year'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/12.0,0) AS BIGINT)</formula>
      <!--<formula part='year'>TIMESTAMPDIFF(YEAR,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='quarter'>CAST(ROUND(TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))/3.0,0) AS BIGINT)</formula>
      <!--<formula part='quarter'>TIMESTAMPDIFF(QUARTER,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='month'>TIMESTAMPDIFF(MONTH,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='dayofyear'>TIMESTAMPDIFF(DAY,CAST(%2 AS TIMESTAMP(3)), CAST(%3 AS DATE))</formula>
      <!--<formula part='dayofyear'>TIMESTAMPDIFF(DOY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <formula part='day'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula part='weekday'>TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>
      <formula  part='week'>CAST(ROUND(TIMESTAMPDIFF(DAY,CAST(%2 AS DATE), CAST(%3 AS DATE))/7.0,0) AS INTEGER)</formula>
      <!--<formula part='week'>TIMESTAMPDIFF(WEEK,CAST(%2 AS DATE), CAST(%3 AS DATE))</formula>-->
      <!--<formula part='week'> CAST(( (FLOOR(UNIX_SECONDS(CAST(sunday AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM sunday) ) - (FLOOR(UNIX_SECONDS(CAST(%2 AS TIMESTAMP)) / 86400) - EXTRACT(DAYOFWEEK FROM %2) ) ) / 7 AS INT64)</formula>-->
      <formula part='hour'>TIMESTAMPDIFF(HOUR,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='minute'>TIMESTAMPDIFF(MINUTE,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <formula part='second'>TIMESTAMPDIFF(SECOND,CAST(%2 AS TIMESTAMP), CAST(%3 AS TIMESTAMP))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='date' />
    </date-function>
   

    <date-function name='DATENAME' return-type='str'>
      <formula>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;%1&apos;)</formula>
      <formula part='year'>TO_CHAR(CAST(%2 AS ANSIDATE), &apos;YYYY&apos;)</formula>
      <formula part='quarter'>TO_CHAR(CAST(%2 AS ANSIDATE), &apos;Q&apos;)</formula>
      <formula part='month'>TO_CHAR(CAST(%2 AS ANSIDATE), &apos;FMMonth&apos;)</formula>
      <formula part='dayofyear'>TO_CHAR(CAST(%2 AS ANSIDATE), &apos;FMDDD&apos;)</formula>
      <formula part='day'>TO_CHAR(CAST(%2 AS ANSIDATE), &apos;FMDD&apos;)</formula>
      <formula part='weekday'>TO_CHAR(CAST(%2 AS ANSIDATE), &apos;FMDay&apos;)</formula>
      <formula part='week'>TCHAR(WEEK_ISO(%2))</formula>
      <formula part='hour'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMHH24&apos;)</formula>
      <formula part='minute'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMMI&apos;)</formula>
      <formula part='second'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMSS&apos;)</formula>
      <argument type='localstr' />
      <argument type='date' />
    </date-function>
    <date-function name='DATENAME' return-type='str'>
      <formula>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;%1&apos;)</formula>
      <formula part='year'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;YYYY&apos;)</formula>
      <formula part='quarter'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;Q&apos;)</formula>
      <formula part='month'>LTRIM(TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMMonth&apos;))</formula>
      <formula part='dayofyear'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMDDD&apos;)</formula>
      <formula part='day'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMDD&apos;)</formula>
      <formula part='weekday'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMDay&apos;)</formula>
      <formula part='week'>CHAR(WEEK_ISO(%2))</formula>
      <formula part='hour'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMHH24&apos;)</formula>
      <formula part='minute'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMMI&apos;)</formula>
      <formula part='second'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMSS&apos;)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATENAME' return-type='str'>
      <formula>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;%1&apos;)</formula>
      <formula part='year'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;YYYY&apos;)</formula>
      <formula part='quarter'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;Q&apos;)</formula>
      <formula part='month'>LTRIM(TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMMonth&apos;))</formula>
      <formula part='dayofyear'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMDDD&apos;)</formula>
      <formula part='day'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMDD&apos;)</formula>
      <formula part='weekday'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMDay&apos;)</formula>
      <formula part='week'>LTRIM(CHAR(WEEK_ISO(%2),'0')</formula>
      <formula part='hour'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMHH24&apos;)</formula>
      <formula part='minute'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMMI&apos;)</formula>
      <formula part='second'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMSS&apos;)</formula>
      <argument type='localstr' />
      <argument type='date' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATENAME' return-type='str'>
      <formula>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;%1&apos;)</formula>
      <formula part='year'>TO_CHAR(CAST(%2 AS ANSIDATE), &apos;YYYY&apos;)</formula>
      <formula part='quarter'>TO_CHAR(CAST(%2 AS ANSIDATE), &apos;Q&apos;)</formula>
      <formula part='month'>TO_CHAR(CAST(%2 AS ANSIDATE), &apos;FMMonth&apos;)</formula>
      <formula part='dayofyear'>TO_CHAR(CAST(%2 AS ANSIDATE), &apos;FMDDD&apos;)</formula>
      <formula part='day'>TO_CHAR(CAST(%2 AS ANSIDATE), &apos;FMDD&apos;)</formula>
      <formula part='weekday'>TO_CHAR(CAST(%2 AS ANSIDATE), &apos;FMDay&apos;)</formula>
      <formula part='week'>(5 + CAST(TO_CHAR(sunday, &apos;DDD&apos;) AS INT) + CAST(TO_CHAR(DATE_TRUNC(&apos;year&apos;, sunday), &apos;D&apos;) AS INT)) / 7</formula>
      <formula part='hour'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMHH24&apos;)</formula>
      <formula part='minute'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMMI&apos;)</formula>
      <formula part='second'>TO_CHAR(CAST(%2 AS TIMESTAMP), &apos;FMSS&apos;)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATEADD' return-type='datetime'>
      <formula>(%3 + %2 * INTERVAL &apos;1&apos; %1)</formula>
      <formula part='year'>ADD_MONTHS(%3, (12 * %2))</formula>
      <formula part='quarter'>ADD_MONTHS(%3, (3 * %2))</formula>
      <formula part='month'>ADD_MONTHS(%3, %2)</formula>
      <formula part='dayofyear'>(%3 + %2 * INTERVAL &apos;1&apos; DAY)</formula>
      <formula part='day'>(%3 + %2 * INTERVAL &apos;1&apos; DAY)</formula>
      <formula part='weekday'>(%3 + %2 * INTERVAL &apos;1&apos; DAY)</formula>
      <formula part='week'>(%3 + (7 * %2))</formula>
      <formula part='hour'>(%3 + %2 * INTERVAL &apos;1&apos; HOUR)</formula>
      <formula part='minute'>(%3 + %2 * INTERVAL &apos;1&apos; MINUTE)</formula>
      <formula part='second'>(%3 + %2 * INTERVAL &apos;1&apos; SECOND)</formula>
      <argument type='localstr' />
      <argument type='int' />
      <argument type='datetime' />
    </date-function>

<!-- BOLKE)! added after e78 -->
    <date-function name='DATEPART' return-type='int'>
      <!--<formula part='year'>YEAR(%2)</formula>
      <formula part='quarter'>CAST((MONTH(%2) - 1) / 3 + 1 AS BIGINT)</formula>
      <formula part='month'>MONTH(%2)</formula>
      <formula part='dayofyear'>DATEDIFF(TO_DATE(%2), TO_DATE(CAST(TRUNC(%2,&apos;YY&apos;) AS DATE))) + 1</formula>
      <formula part='day'>DAY(%2)</formula>
      <formula part='weekday'>(8 + DATEDIFF(%2,NEXT_DAY(CAST(%2 AS DATE),&apos;SU&apos;)))</formula> -->
      <formula part='week'>FLOOR((14 + DATEDIFF(%2, TRUNC(%2,&apos;YY&apos;)) + DATEDIFF(TRUNC(%2,&apos;YY&apos;),NEXT_DAY(TRUNC(%2,&apos;YY&apos;),&apos;SU&apos;)))/7)</formula>
<!--      <formula part='hour'>HOUR(%2)</formula>
      <formula part='minute'>MINUTE(%2)</formula>
      <formula part='second'>SECOND(%2)</formula> -->
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <!--DATYEPART after e78-->
<!-- BOLKE)! added after e78 -->
    <date-function name='DATEPART' return-type='int'>
      <!--<formula part='year'>YEAR(%2)</formula>
      <formula part='quarter'>CAST((MONTH(%2) - 1) / 3 + 1 AS BIGINT)</formula>
      <formula part='month'>MONTH(%2)</formula>
      <formula part='dayofyear'>DATEDIFF(TO_DATE(%2), TO_DATE(CAST(TRUNC(%2,&apos;YY&apos;) AS DATE))) + 1</formula>
      <formula part='day'>DAY(%2)</formula>
      <formula part='weekday'>(8 + DATEDIFF(%2,NEXT_DAY(CAST(%2 AS DATE),&apos;SU&apos;)))</formula> -->
      <formula part='week'>FLOOR((14 + DATEDIFF(%2, TRUNC(%2,&apos;YY&apos;)) + DATEDIFF(TRUNC(%2,&apos;YY&apos;),NEXT_DAY(TRUNC(%2,&apos;YY&apos;),&apos;SU&apos;)))/7)</formula>
<!--      <formula part='hour'>HOUR(%2)</formula>
      <formula part='minute'>MINUTE(%2)</formula>
      <formula part='second'>SECOND(%2)</formula> -->
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <!--DATYEPART after e78-->
    <date-function name='DATEPART' return-type='int'>
      <formula part='year'>YEAR(%2)</formula>
      <formula part='quarter'>QUARTER(%2)</formula>
      <formula part='month'>MONTH(%2)</formula>
      <formula part='dayofyear'>DOY(%2)</formula>
      <formula part='day'>DAY(%2)</formula>
      <formula part='weekday'>DAYOFWEEK(%2)</formula>
      <formula part='week'>WEEK_ISO(%2)</formula>
      <formula part='hour'>HOUR(%2)</formula>
      <formula part='minute'>MINUTE(%2)</formula>
      <formula part='second'>SECOND(%2)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEPART' return-type='int'>
      <formula part='year'>YEAR(%2)</formula>
      <formula part='quarter'>QUARTER(%2)</formula>
      <formula part='month'>MONTH(%2)</formula>
      <formula part='dayofyear'>DOY(%2)</formula>
      <formula part='day'>DAY(%2)</formula>
      <formula part='weekday'>DAYOFWEEK(%2)</formula>
      <formula part='week'>WEEK_ISO(%2)</formula>
      <formula part='hour'>HOUR(%2)</formula>
      <formula part='minute'>MINUTE(%2)</formula>
      <formula part='second'>SECOND(%2)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>

    <!--<date-function name='DATEPART' return-type='int'>
      <formula part='year'>YEAR(%2)</formula>
      <formula part='quarter'>CAST((MONTH(%2) - 1) / 3 + 1 AS BIGINT)</formula>
      <formula part='month'>MONTH(%2)</formula>
      <formula part='dayofyear'>DATEDIFF(TO_DATE(%2), TO_DATE(CAST(TRUNC(%2,&apos;YY&apos;) AS DATE))) + 1</formula>
      <formula part='day'>DAY(%2)</formula>
      <formula part='weekday'>(8 + DATEDIFF(%2,NEXT_DAY(CAST(%2 AS DATE),&apos;SU&apos;)))</formula>
      <formula part='week'>FLOOR((14 + DATEDIFF(%2, TRUNC(%2,&apos;YY&apos;)) + DATEDIFF(TRUNC(%2,&apos;YY&apos;),NEXT_DAY(TRUNC(%2,&apos;YY&apos;),&apos;SU&apos;)))/7)</formula>
      <formula part='hour'>HOUR(%2)</formula>
      <formula part='minute'>MINUTE(%2)</formula>
      <formula part='second'>SECOND(%2)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function> -->
     <date-function name='DATETRUNC' return-type='datetime'>
      <formula>TRUNC( CAST(%2 AS DATE), &apos;%1&apos; )</formula>
      <formula part='hour'>TO_TIMESTAMP(TO_CHAR(%2, &apos;YYYY-MM-DD HH24&apos;), &apos;YYYY-MM-DD HH24&apos;)</formula>
      <formula part='minute'>TO_TIMESTAMP(TO_CHAR(%2, &apos;YYYY-MM-DD HH24:MI&apos;), &apos;YYYY-MM-DD HH24:MI&apos;)</formula>
      <formula part='second'>TO_TIMESTAMP(TO_CHAR(%2, &apos;YYYY-MM-DD HH24:MI:SS&apos;), &apos;YYYY-MM-DD HH24:MI:SS&apos;)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
<!-- BOLKE01 2019-10-08b    <date-function name='DATETRUNC' return-type='int'>
      <formula part='year'>DATE_TRUNC('YEAR',%2)</formula>
      <formula part='quarter'>DATE_TRUNC('QUARTER',%2)</formula>
      <formula part='month'>DATE_TRUNC('MONTH',%2)</formula>
      <formula part='dayofyear'>DATE_TRUNC('DAY',%2)</formula>
      <formula part='day'>DATE_TRUNC('DAY',%2)</formula>
      <formula part='weekday'>DATE_TRUNC('DAY',%2)</formula>
      <formula part='week'>DATE_TRUNC('WEEK',%2)</formula>
      <formula part='hour'>DATE_TRUNC('HOUR',%2)</formula>
      <formula part='minute'>DATE_TRUNC('MINUTE',%2)</formula>
      <formula part='second'>DATE_TRUNC('SECOND',%2)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
      <date-function name='DATETRUNC' return-type='int'>
      <formula part='year'>TIMESTAMP(DATE_TRUNC('YEAR',%2))</formula>
      <formula part='quarter'>TIMESTAMP(DATE_TRUNC('QUARTER',%2))</formula>
      <formula part='month'>TIMESTAMP(DATE_TRUNC('MONTH',%2))</formula>
      <formula part='dayofyear'>TIMESTAMP(DATE_TRUNC('DAY',%2))</formula>
      <formula part='day'>TIMESTAMP(DATE_TRUNC('DAY',%2))</formula>
      <formula part='weekday'>TIMESTAMP(DATE_TRUNC('DAY',%2))</formula>
      <formula part='week'>TIMESTAMP(DATE_TRUNC('WEEK',%2))</formula>
      <formula part='hour'>TIMESTAMP(DATE_TRUNC('HOUR',%2))</formula>
      <formula part='minute'>TIMESTAMP(DATE_TRUNC('MINUTE',%2))</formula>
      <formula part='second'>TIMESTAMP(DATE_TRUNC('SECOND',%2))</formula>
      <argument type='localstr' />
      <argument type='date' />
  </date-function> -->
  </function-map>
  
  <sql-format>
   <!--
      date-parts
      Used with generic (non-part-specific) date function formulas.
      A date-part-group can apply to one or more date functions, denoted
      by date-function child elements. If none are specified, the group
      acts as the default.

      The name attribute specifies a Tableau date part, while the
      value attribute contains the date part string literal to use in
      corresponding date functions.
    -->
    <date-parts>
      <date-part-group>
        <!-- Default: DATEADD and DATEDIFF -->
        <part name='year' value='YEAR' />
        <part name='quarter' value='QUARTER' />
        <part name='month' value='MONTH' />
        <part name='week' value='WEEK' />
        <part name='weekday' value='DAYOFWEEK' />
        <part name='dayofyear' value='DOY' />
        <part name='day' value='DAY' />
        <part name='hour' value='HOUR' />
        <part name='minute' value='MINUTE' />
        <part name='second' value='SECOND' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATENAME' />
        <part name='year' value='YYYY' />
        <part name='quarter' value='Q' />
        <part name='month' value='Month' />
        <part name='dayofyear' value='FMDDD' />
        <part name='day' value='FMDD' />
        <part name='weekday' value='FMDay' />
        <part name='week' value='WW' />
        <part name='hour' value='HH24' />
        <part name='minute' value='FMMI' />
        <part name='second' value='FMSS' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATEPART' />
        <part name='year' value='YYYY' />
        <part name='quarter' value='Q' />
        <part name='month' value='MM' />
        <part name='dayofyear' value='DDD' />
        <part name='day' value='DD' />
        <part name='weekday' value='D' />
        <part name='week' value='WW' />
        <part name='hour' value='HH24' />
        <part name='minute' value='MI' />
        <part name='second' value='SS' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATETRUNC' />
        <part name='year' value='YEAR' />
        <part name='quarter' value='Q' />
        <part name='month' value='MONTH' />
        <part name='dayofyear' value='DD' />
        <part name='day' value='DD' />
        <part name='weekday' value='DD' />
        <part name='week' value='IW' />
        <part name='hour' value='HH24' />
        <part name='minute' value='MI' />
        <part name='second' value='YYYY-MM-DD HH24:MI:SS' />
      </date-part-group>
    </date-parts>
    <!--
      format-create-table
      Piece-by-piece formula for creating a table.
      Predicates can be used with tokens that only correspond
      to a certain type of table.
      Predicates:
        GlobalTemp
        LocalTemp
        AnyTemp
        NoTemp
      String substitution tokens:
        %n - table name
        %f - formatted column list
      -->
    <format-create-table>
      <formula>DECLARE</formula>
      <formula predicate='GlobalTemp'>GLOBAL</formula>
      <formula predicate='LocalTemp'>GLOBAL</formula>
      <formula predicate='AnyTemp'>TEMPORARY</formula>
      <formula>TABLE %n (</formula>
      <formula>%f</formula>
      <formula>)</formula>
      <formula predicate='AnyTemp'> ON COMMIT PRESERVE ROWS</formula>
    </format-create-table>
	<!--
      format-drop-table
      Format for dropping a table. %1 is the table name.
      Each formula is executed as a separate statement.
    -->
    <format-drop-table>
      <formula>DROP TABLE IF EXISTS %1</formula>
    </format-drop-table>
	<!--
      format-insert
      Strategy for formatting an INSERT statement
      [Default]Individual: Separate INSERT query for each row
      Bulk: Single INSERT query can insert multiple rows at once
    -->
    <format-insert value='Bulk' />
	<!--
      format-null
      Allows a type-specific expression for NULL. Tableau defaults to 'NULL'
      where no type-specific formula is given.
    -->
    <format-null>
      <local-type name='date' value='CAST(NULL AS ANSIDATE)' />
      <local-type name='datetime' value='CAST(NULL AS TIMESTAMP)' />
	  <local-type name='int' value='CAST(NULL AS integer)' />
	  <local-type name='real' value='CAST(NULL AS float)' />
	  <local-type name='str' value='CAST(NULL AS varchar(1))' />
	</format-null>
	<!--
      format-select
      Piece-by-piece formula for defining a SELECT statement
      ON COMMIT PRESERVE ROWS IS NOT REQUIRED FOR Avalanche/Ingres/ActianX
    -->
    <format-select>
      <part name='Into' value='DECLARE GLOBAL TEMPORARY TABLE %1 AS' />
      <!--<part name='Top' value='SELECT * FROM (' /> -->
      <part name='Select' value='SELECT %1' />
      <part name='From' value='FROM %1' />
      <part name='Where' value='WHERE %1' />
      <part name='Group' value='GROUP BY %1' />
      <part name='Having' value='HAVING %1' />
      <part name='OrderBy' value='ORDER BY %1' />
      <!--<part name='Top' value=') WHERE ROWNUM &lt;= %1' />-->
      <!--<part name='Top' value=' AS xrt) '  /> -->
      <part name='TopPercent' value='TABLESAMPLE BERNOULLI(%1)' />
      <part name='TopSamplePercent' value='TABLESAMPLE BERNOULLI(%1)' />
      <part name='TopSampleRecords' value='ORDER BY rand()' />
      <part name='TopSampleRecords' value='%1' />
    </format-select>
    <!--
      id-allowed-characters
      Comprehensive list of characters which can be used in identifiers
    -->
    <id-allowed-characters value='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_' />
  </sql-format>

</dialect>
